#!/usr/bin/env python3
import sys
import csv
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent / "lib"))
from utils.transform import (
    METADATA_COLUMNS,
)

from utils.transformpipeline.transforms import UserProvidedGeoLocationSubstitutionRules
import argparse
from collections import defaultdict

def check_positive_int(v):
    n = int(v)
    if n <= 0 :
        raise argparse.ArgumentTypeError(str(v)+" is not a positive integer value." )
    return n

if __name__ == '__main__':
    

    parser = argparse.ArgumentParser(
        description="Parse a file containing substitutions rules for geographic locations and assess if the rules are compatible.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument("--geo-location-rules", required = True,
        help="manually curated rules to correct geographical location.\n"
            "The TSV file should have no header and exactly 2 columns in the following format:\n\t"
            "region/country/division/location<tab>region/country/division/location"
        "Lines or parts of lines starting with '#' are treated as comments.\n"
        "e.g.\n\t"
        "Europe/Spain/Catalunya/MatarÃ³\tEurope/Spain/Catalunya/Mataro\n\t")
    parser.add_argument( "--min-generalized",
                        default=2, type=check_positive_int,
                        help="minimum number of rules needed to consider generalization. Default : 2" )


    args = parser.parse_args()

    geoRules = UserProvidedGeoLocationSubstitutionRules()
    if args.geo_location_rules :
        # use curated rules to subtitute known spurious locations with correct ones
        with open(args.geo_location_rules,'r') as geo_location_rules_fh :
            
            for line in geo_location_rules_fh :

                if line.lstrip()[0] == '#':
                    continue

                row = line.strip('\n').split('\t')

                raw,annot = None,None
                if len(row) == 8:
                    row[-1] = row[-1].partition('#')[0].rstrip()
                    raw , annot = tuple( row[:4] ) , tuple( row[4:8] )
                elif len(row) == 2:
                    row[-1] = row[-1].partition('#')[0].rstrip()
                    raw , annot = tuple( row[0].split('/') ) , tuple( row[1].split('/') )
                else:
                    print("WARNING: couldn't decode annotation line " + "\t".join(row))
                    continue

                geoRules.add_user_rule(
                    raw,
                    annot
                )

    print('rules read')

    potentiallyGeneral = {}
    potentiallyGeneralList = defaultdict(list)
    problemGeneralization = set()


    for region , countries in geoRules.entries.items():
        for country , divisions in countries.items():
            for division , locations in divisions.items():
                for location , arrival in locations.items() :
                    
                    raw=tuple([region,country,division,location])

                    # We want to detect cases such as 
                    # a/b/c/d -> a/b/C/d
                    # in which case we could generalize to a/b/c/* -> a/b/C/*
                    # NB : in general we want to keep the upper levels in the substitution pattern

                    # finding which fields are candidate to generalization
                    generalizable = []
                    for i in [3,2,1,0]:
                        if raw[i] == arrival[i] and raw[i]!='*':
                            generalizable.append(i)
                        else :
                            break

                    if len(generalizable) > 0 :

                        generalizedRaw = list(raw)
                        generalizedArrival = list(arrival)
                        for i in generalizable:
                            generalizedRaw[i] = '*'
                            generalizedArrival[i] = '*'

                        generalizedRaw = tuple(generalizedRaw)
                        generalizedArrival = tuple(generalizedArrival)


                        # checking if this generalizable rule is already in conflict with another 
                        if generalizedRaw in potentiallyGeneral and potentiallyGeneral[generalizedRaw] != generalizedArrival:
                            problemGeneralization.add( generalizedRaw )

                        # adding this generalized rule to the set
                        potentiallyGeneral[generalizedRaw] = generalizedArrival
                        potentiallyGeneralList[generalizedRaw].append( (raw , arrival) )

    ## filtering out problem cases and generalization of a low number of rules + preparing for sorting by number of generalized rules
    general2nbGeneralized = {raw:len(potentiallyGeneralList[raw]) for raw in potentiallyGeneral.keys() if ( not raw in problemGeneralization) and len(potentiallyGeneralList[raw]) >= args.min_generalized }
    
    sortedGeneralRaw = list( zip( *sorted(general2nbGeneralized.items() , key= lambda x : x[1] , reverse=True ) ) )[0]


    print('Generalization assessed.' , len(sortedGeneralRaw) , 'potential candidates.' )

    sep1='/'
    sep2='\t'


    for generalizedRaw in sortedGeneralRaw:
        generalizedArrival = potentiallyGeneral[generalizedRaw]

        print('#***')
        print('#Generalizes',len(potentiallyGeneralList[generalizedRaw]),"rules")
        print(sep1.join(generalizedRaw),sep1.join(generalizedArrival) , "#GENERAL", sep=sep2 )
        for generalized in potentiallyGeneralList[generalizedRaw]:

            print('#SPECIFIC',sep1.join(generalized[0]),sep1.join(generalized[1]) , sep=sep2 )



