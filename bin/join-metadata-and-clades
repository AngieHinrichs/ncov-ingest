#!/usr/bin/env python3
import argparse
import sys

import pandas as pd

INSERT_BEFORE_THIS_COLUMN = "pango_lineage"
METADATA_JOIN_COLUMN_NAME = 'strain'
NEXTCLADE_JOIN_COLUMN_NAME = 'seqName'
VALUE_MISSING_DATA = '?'

column_map = {
    "clade": "Nextstrain_clade",
    "totalMissing": "missing_data",
    "totalMutations": "divergence",
    "totalNonACGTNs": "nonACGTN",
    "qc.privateMutations.total":  "rare_mutations",
    "qc.snpClusters.totalSNPs": "snp_clusters",
    "qc.missingData.status": "QC_missing_data",
    "qc.mixedSites.status": "QC_mixed_sites",
    "qc.privateMutations.status": "QC_rare_mutations",
    "qc.snpClusters.status": "QC_snp_clusters",
}

def reorder_columns(result: pd.DataFrame):
    """
    Moves the new clade column after a specified column
    """
    columns = list(result.columns)
    columns.remove(column_map['clade'])
    insert_at = columns.index(INSERT_BEFORE_THIS_COLUMN)
    columns.insert(insert_at, column_map['clade'])
    return result[columns]


def parse_args():
    parser = argparse.ArgumentParser(
        description="Joins metadata file with Nextclade clade output",
    )
    parser.add_argument("first_file")
    parser.add_argument("second_file")
    parser.add_argument("-o", default=sys.stdout)
    return parser.parse_args()


def main():
    args = parse_args()

    metadata = pd.read_csv(args.first_file, index_col=METADATA_JOIN_COLUMN_NAME,
                           sep='\t', low_memory=False, na_filter = False)

    # Read and rename clade column to be more descriptive
    clades = pd.read_csv(args.second_file, index_col=NEXTCLADE_JOIN_COLUMN_NAME,
                         sep='\t', low_memory=False, na_filter = False) \
            .rename(columns=column_map)

    clades = clades[list(column_map.values())]

    # Concatenate on columns
    result = pd.merge(
        metadata, clades,
        left_index=True,
        right_index=True,
        how='left'
    )
    for col in column_map.values():
        result[col] = result[col].fillna(VALUE_MISSING_DATA)

    # Move the new column so that it's next to other clade columns
    result = reorder_columns(result)

    result.to_csv(args.o, index_label=METADATA_JOIN_COLUMN_NAME, sep='\t')


if __name__ == '__main__':
    main()
