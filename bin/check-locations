#!/usr/bin/env python3
"""
Validates the locations in the metadata TSV file produced by the transform
scripts. If the validations succeed, saves a location hierarchy from the
given metadata to a local file.
"""
import sys
import copy
import argparse
import pandas as pd
from pathlib import Path
from typing import List

sys.path.insert(0, str(Path(__file__).parent.parent / "lib"))
from utils.hierarchy_dataframe import hierarchy_dataframe

LOCATION_HIERARCHY_COLUMNS = ['region', 'country', 'division', 'location']


def validate_metadata(metadata: pd.DataFrame, columns: List[str]):
    def no_missing_hierarchy_data():
        """
        Raises an ``AssertionError`` if the metadata have missing values in the
        given location hierarchy *columns* (except for 'location', which is
        allowed to have missing values).
        """
        try:
            non_null_columns = columns.copy()
            non_null_columns.remove('location')
        except ValueError:
            non_null_columns = columns

        non_null_columns = [ f"{resolution}_exposure" for resolution in non_null_columns ]

        assert metadata[non_null_columns].notnull().all().all(), \
            "There are missing values in the location hierarchy columns " \
            f"«{non_null_columns}». At this point, we expect all " \
            "missing values to be interpolated."

    no_missing_hierarchy_data()


def print_new_location_hierarchy(metadata: pd.DataFrame, columns: List[str]):
    """
    Saves a new ``pd.DataFrame`` of all unique location hierarchies in the given
    metadata, using the given *columns* as hierarchy columns.
    """
    metadata_hierarchies = hierarchy_dataframe(metadata, args.unique_id, columns)

    metadata_hierarchies[columns] \
        .to_csv(args.output_location_hierarchy, sep='\t', index=False)


parser = argparse.ArgumentParser(
    description="Validate a metadata TSV file generated by a transform script",
    formatter_class=argparse.RawTextHelpFormatter
)
parser.add_argument("metadata",
    help="A metadata TSV file.")
parser.add_argument("output_location_hierarchy",
    help="Output location for the new location hierarchy TSV file.")
parser.add_argument("unique_id",
    help="A column name that uniquely identifies data in the metadata TSV file.\n"
        "e.g. 'gisaid_epi_isl' or 'genbank_accession'")

args = parser.parse_args()

metadata = pd.read_csv(args.metadata, sep="\t")

validate_metadata(metadata, LOCATION_HIERARCHY_COLUMNS)
print_new_location_hierarchy(metadata, LOCATION_HIERARCHY_COLUMNS)
